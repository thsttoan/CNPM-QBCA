@model QBCA.ViewModels.AssignedPlanViewModel
@{
    ViewBag.Title = "Create Plan";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        font-size: 17px;
        color: #36395A;
        background-color: #f8f9fc;
    }

    .neumorphic-box {
        background: #f2f3f7;
        border-radius: 25px;
        box-shadow: 8px 8px 16px #d1d9e6, -8px -8px 16px #ffffff;
        padding: 40px;
        max-width: 650px;
        margin: 100px auto;
        font-size: 17px;
    }

    h3 {
        font-size: 1.7rem;
        font-weight: 700;
        color: #4F46E5;
        margin-bottom: 30px;
    }

    .neumorphic-label {
        font-size: 1.05rem;
        font-weight: 600;
        margin-bottom: 6px;
        display: block;
    }

    .neumorphic-input,
    .modern-dropdown,
    textarea {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        border-radius: 12px;
        border: none;
        margin-bottom: 20px;
        background: #f2f3f7;
        font-weight: 500;
        color: #36395A;
        box-shadow: inset 6px 6px 10px #d1d9e6, inset -6px -6px 10px #ffffff;
        appearance: none;
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1rem;
    }

    .modern-dropdown {
        background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6 8L10 12L14 8' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
    }

        .neumorphic-input:focus,
        .modern-dropdown:focus,
        textarea:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);
        }

    .neumorphic-button {
        width: 100%;
        padding: 14px;
        font-size: 1.05rem;
        border-radius: 12px;
        background-color: #4F46E5;
        color: white;
        font-weight: bold;
        border: none;
        transition: background 0.3s;
    }

        .neumorphic-button:hover {
            background-color: #3730A3;
        }

    .validation-message {
        color: red;
        font-size: 0.95rem;
        margin-top: -14px;
        margin-bottom: 16px;
        display: block;
    }

    .alert-success {
        background-color: #e6ffed;
        border-left: 6px solid #22c55e;
        padding: 12px 20px;
        margin-bottom: 20px;
        border-radius: 10px;
        font-weight: 600;
        color: #065f46;
        text-align: center;
    }
</style>

<div class="neumorphic-box">
    <h3 class="text-center">📝 Assign Exam Plan</h3>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert-success">@TempData["SuccessMessage"]</div>
    }

    @using (Html.BeginForm("Create", "AssignedPlan", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <label class="neumorphic-label">Exam Plan</label>
        @Html.DropDownListFor(m => m.ExamPlanID,
        new SelectList(Model.AllExamPlans, "ExamPlanID", "Name", Model.ExamPlanID),
        "-- Select Exam Plan --",
        new { @class = "modern-dropdown" })
    @Html.ValidationMessageFor(m => m.ExamPlanID, "", new { @class = "validation-message" })

    <label class="neumorphic-label">Distribution</label>
    @Html.DropDownListFor(m => m.DistributionID,
        new SelectList(Model.DisplayDistributions, "DistributionID", "DisplayName", Model.DistributionID),
        "-- Select Distribution --",
        new { @class = "modern-dropdown" })
    @Html.ValidationMessageFor(m => m.DistributionID, "", new { @class = "validation-message" })

    <label class="neumorphic-label">Assign To</label>
    @Html.DropDownListFor(m => m.AssignedToID,
        new SelectList(Model.AllLecturers, "UserID", "FullName", Model.AssignedToID),
        "-- Select Lecturer --",
        new { @class = "modern-dropdown" })
    @Html.ValidationMessageFor(m => m.AssignedToID, "", new { @class = "validation-message" })

    <label class="neumorphic-label">Task Type</label>
    @Html.DropDownListFor(m => m.TaskType,
        new SelectList(Model.TaskTypeOptions, "Value", "Text", ((int)Model.TaskType)),
        "-- Select Task Type --",
        new { @class = "modern-dropdown" })
    @Html.ValidationMessageFor(m => m.TaskType, "", new { @class = "validation-message" })

    <label class="neumorphic-label">Deadline</label>
    @Html.TextBoxFor(m => m.Deadline, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "neumorphic-input" })
    @Html.ValidationMessageFor(m => m.Deadline, "", new { @class = "validation-message" })

    <label class="neumorphic-label">Notes</label>
    @Html.TextAreaFor(m => m.Notes, new { @class = "neumorphic-input", rows = 4, placeholder = "Any additional instructions..." })

    <button type="submit" class="neumorphic-button">📤 Assign</button>
        }
</div>

<script>
    document.querySelector("form").addEventListener("submit", function (e) {
        const deadlineInput = document.querySelector("input[type='datetime-local']");
        const deadline = new Date(deadlineInput.value);
        const now = new Date();

        if (deadline <= now) {
            alert("❌ Deadline must be in the future.");
            e.preventDefault();
        }
    });
</script>
