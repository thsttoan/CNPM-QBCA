// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QBCA.Data;

#nullable disable

namespace CNPM_QBCA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QBCA.Models.CLO", b =>
                {
                    b.Property<int>("CLOID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CLOID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("CLOID");

                    b.HasIndex("SubjectID");

                    b.ToTable("CLOs");
                });

            modelBuilder.Entity("QBCA.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DifficultyLevelID"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("DifficultyLevelID");

                    b.HasIndex("SubjectID");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("QBCA.Models.DuplicateCheckResult", b =>
                {
                    b.Property<int>("CheckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckID"));

                    b.Property<string>("CheckType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("SimilarQuestionID")
                        .HasColumnType("int");

                    b.Property<double>("SimilarityScore")
                        .HasColumnType("float");

                    b.HasKey("CheckID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SimilarQuestionID");

                    b.ToTable("DuplicateCheckResults");
                });

            modelBuilder.Entity("QBCA.Models.ExamPlan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("NumOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("PlanID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SubjectID");

                    b.ToTable("ExamPlans");
                });

            modelBuilder.Entity("QBCA.Models.ExamQuestion", b =>
                {
                    b.Property<int>("ExamQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamQuestionID"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ExamQuestionID");

                    b.HasIndex("PlanID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("QBCA.Models.ExamReview", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("ExamQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewerID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("ExamQuestionID");

                    b.HasIndex("ReviewerID");

                    b.ToTable("ExamReviews");
                });

            modelBuilder.Entity("QBCA.Models.Login", b =>
                {
                    b.Property<int>("LoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LoginID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("QBCA.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedEntityID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("QBCA.Models.Plan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("PlanID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("QBCA.Models.PlanDistribution", b =>
                {
                    b.Property<int>("DistributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistributionID"));

                    b.Property<int>("AssignedManagerRoleID")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevelID")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Assigned");

                    b.HasKey("DistributionID");

                    b.HasIndex("AssignedManagerRoleID");

                    b.HasIndex("DifficultyLevelID");

                    b.HasIndex("PlanID");

                    b.ToTable("PlanDistributions");
                });

            modelBuilder.Entity("QBCA.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("CLOID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevelID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("CLOID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DifficultyLevelID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QBCA.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("QBCA.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("QBCA.Models.SubmissionTable", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FinalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("SubmissionID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PlanID");

                    b.ToTable("SubmissionTables");
                });

            modelBuilder.Entity("QBCA.Models.TaskAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentID");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("QBCA.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QBCA.Models.CLO", b =>
                {
                    b.HasOne("QBCA.Models.Subject", "Subject")
                        .WithMany("CLOs")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QBCA.Models.DifficultyLevel", b =>
                {
                    b.HasOne("QBCA.Models.Subject", "Subject")
                        .WithMany("DifficultyLevels")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QBCA.Models.DuplicateCheckResult", b =>
                {
                    b.HasOne("QBCA.Models.Question", "Question")
                        .WithMany("DuplicateCheckResults")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.Question", "SimilarQuestion")
                        .WithMany("SimilarQuestions")
                        .HasForeignKey("SimilarQuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("SimilarQuestion");
                });

            modelBuilder.Entity("QBCA.Models.ExamPlan", b =>
                {
                    b.HasOne("QBCA.Models.User", "Creator")
                        .WithMany("ExamPlansCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.Subject", "Subject")
                        .WithMany("ExamPlans")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QBCA.Models.ExamQuestion", b =>
                {
                    b.HasOne("QBCA.Models.ExamPlan", "ExamPlan")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamPlan");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QBCA.Models.ExamReview", b =>
                {
                    b.HasOne("QBCA.Models.ExamQuestion", "ExamQuestion")
                        .WithMany("ExamReviews")
                        .HasForeignKey("ExamQuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.User", "Reviewer")
                        .WithMany("ExamReviews")
                        .HasForeignKey("ReviewerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamQuestion");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("QBCA.Models.Login", b =>
                {
                    b.HasOne("QBCA.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QBCA.Models.Notification", b =>
                {
                    b.HasOne("QBCA.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QBCA.Models.Plan", b =>
                {
                    b.HasOne("QBCA.Models.Subject", "Subject")
                        .WithMany("Plans")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QBCA.Models.PlanDistribution", b =>
                {
                    b.HasOne("QBCA.Models.Role", "AssignedManagerRole")
                        .WithMany()
                        .HasForeignKey("AssignedManagerRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.Plan", "Plan")
                        .WithMany("Distributions")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedManagerRole");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("QBCA.Models.Question", b =>
                {
                    b.HasOne("QBCA.Models.CLO", "CLO")
                        .WithMany("Questions")
                        .HasForeignKey("CLOID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.User", "Creator")
                        .WithMany("QuestionsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CLO");

                    b.Navigation("Creator");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QBCA.Models.Subject", b =>
                {
                    b.HasOne("QBCA.Models.User", "Creator")
                        .WithMany("SubjectsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("QBCA.Models.SubmissionTable", b =>
                {
                    b.HasOne("QBCA.Models.User", "Creator")
                        .WithMany("SubmissionTablesCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.ExamPlan", "ExamPlan")
                        .WithMany("SubmissionTables")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ExamPlan");
                });

            modelBuilder.Entity("QBCA.Models.TaskAssignment", b =>
                {
                    b.HasOne("QBCA.Models.User", "Assigner")
                        .WithMany("TaskAssignmentsAssigned")
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QBCA.Models.User", "Assignee")
                        .WithMany("TaskAssignmentsReceived")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Assigner");
                });

            modelBuilder.Entity("QBCA.Models.User", b =>
                {
                    b.HasOne("QBCA.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QBCA.Models.CLO", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QBCA.Models.DifficultyLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QBCA.Models.ExamPlan", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("SubmissionTables");
                });

            modelBuilder.Entity("QBCA.Models.ExamQuestion", b =>
                {
                    b.Navigation("ExamReviews");
                });

            modelBuilder.Entity("QBCA.Models.Plan", b =>
                {
                    b.Navigation("Distributions");
                });

            modelBuilder.Entity("QBCA.Models.Question", b =>
                {
                    b.Navigation("DuplicateCheckResults");

                    b.Navigation("ExamQuestions");

                    b.Navigation("SimilarQuestions");
                });

            modelBuilder.Entity("QBCA.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("QBCA.Models.Subject", b =>
                {
                    b.Navigation("CLOs");

                    b.Navigation("DifficultyLevels");

                    b.Navigation("ExamPlans");

                    b.Navigation("Plans");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QBCA.Models.User", b =>
                {
                    b.Navigation("ExamPlansCreated");

                    b.Navigation("ExamReviews");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("QuestionsCreated");

                    b.Navigation("SubjectsCreated");

                    b.Navigation("SubmissionTablesCreated");

                    b.Navigation("TaskAssignmentsAssigned");

                    b.Navigation("TaskAssignmentsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
